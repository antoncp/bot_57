import logging
import os
from threading import Timer

import telebot
from dotenv import load_dotenv
from telebot.types import (
    BotCommand,
    ForceReply,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)

from config import log
from db import DataBase
from geo import (
    check_city,
    coordinates_to_city,
    local_time,
    map_users,
    timer_alert,
)
from texts import REMARKS
from user import User, activate_user

load_dotenv()
TEL_TOKEN = os.environ.get('TEL_TOKEN')
bot = telebot.TeleBot(TEL_TOKEN)


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –±–æ—Ç–∞
bot.set_my_commands(
    [
        BotCommand("/new", "–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –∏–º—è –∏ –≥–æ—Ä–æ–¥"),
        BotCommand("/message", "–ù–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ–º –∑–µ–º–ª—è–∫–∞–º"),
        BotCommand("/locations", "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≥–æ—Ä–æ–¥–∞"),
        BotCommand("/timezones", "–ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞"),
        BotCommand("/timer", "–¢–∞–π–º–µ—Ä —É—á–µ–±—ã"),
    ]
)


# –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.message_handler(commands=['start', 'help'])
def start(message):
    """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞."""
    bot.send_message(message.chat.id, REMARKS['intro'], parse_mode='Markdown')


@bot.message_handler(commands=['new'])
def new(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = activate_user(message.chat.id)
    if user.record:
        bot.send_document(
            message.chat.id,
            (
                'CgACAgIAAxkDAAMMY-oXBpKk7qbSEbcUFo1VgM_N'
                'ZwADniIAAueiUUsNLalUHu6Nly4E'
            ),
            caption=f'{user.name} –∏–∑ {user.city}, {user.country}, –≤—ã —É–∂–µ –µ—Å—Ç—å'
            ' –≤ –±–∞–∑–µ. –î–∞–Ω–Ω—ã–µ –Ω–µ–ª—å–∑—è –ø–æ–º–µ–Ω—è—Ç—å.',
        )
        return

    provide_name = InlineKeyboardMarkup()
    provide_name.add(
        InlineKeyboardButton(text='–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –∏–º—è', callback_data='name')
    )
    bot.send_message(
        message.chat.id,
        REMARKS['name'],
        reply_markup=provide_name,
        parse_mode='Markdown',
    )


@bot.message_handler(commands=['message'])
def message(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∑–µ–º–ª—è–∫–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    user = activate_user(message.chat.id)
    if not user.record:
        answer = '–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥. –ì–æ—Ä–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.'
        bot.send_message(message.chat.id, answer)
        return

    locals = user.get_locals()
    if not locals:
        answer = (
            f'{user.name}, –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ –ø–æ–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã '
            '—Ç–æ–ª—å–∫–æ –≤—ã. –ñ–¥–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.'
        )
        bot.send_message(message.chat.id, answer)
        return

    num = len(locals)
    if user.country == '–†–æ—Å—Å–∏—è':
        answer = REMARKS['locals'].format(user.city, num)
    else:
        answer = REMARKS['locals_ino'].format(user.country, num)
    send_message = InlineKeyboardMarkup()
    send_message.add(
        InlineKeyboardButton(
            text='–ù–∞–ø–∏—Å–∞—Ç—å –∏–º –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data='callall'
        )
    )
    bot.send_message(
        message.chat.id,
        answer,
        reply_markup=send_message,
        parse_mode='Markdown',
    )


@bot.message_handler(commands=['locations'])
def get_all_locations(message):
    """–í—ã–≤–æ–¥–∏—Ç –≥–µ–æ–≥—Ä–∞—Ñ–∏—é –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞."""
    db = DataBase(message.chat.id)
    ru = db.get_locations_ru()
    ino = db.get_locations_ino()
    db.close()
    num = sum([i[1] for i in ru]) + sum([i[1] for i in ino])
    header_ru = (
        '_–ì–µ–æ–≥—Ä–∞—Ñ–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ–≥–æ—Ä—Ç—ã 57 –≤ —ç—Ç–æ–º –±–æ—Ç–µ_ '
        f'_(–≤—Å–µ–≥–æ {num} —á–µ–ª.)_\n'
        '–°—Ç—É–¥–µ–Ω—Ç—ã –∏–∑ –≥–æ—Ä–æ–¥–æ–≤ üá∑üá∫\n'
        '*–ì–æ—Ä–æ–¥* *|*   *–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫*\n'
        '---------------------------------\n'
    )
    header_ino = (
        '\n---------------------------------\n'
        '–°—Ç—É–¥–µ–Ω—Ç—ã –∏–∑ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω\n'
        '*–°—Ç—Ä–∞–Ω–∞* *|*   *–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫*\n'
        '---------------------------------\n'
    )
    ru_list = '–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'
    ino_list = '–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'
    if ru:
        ru_list = '\n'.join([f'*{city}*: `{people}`' for city, people in ru])
    if ino:
        ino_list = '\n'.join([f'*{cou}*: `{people}`' for cou, people in ino])
    answer = header_ru + ru_list + header_ino + ino_list
    bot.send_message(message.chat.id, answer, parse_mode='Markdown')
    if num != User.num_of_users:
        User.num_of_users = num
        map_url = map_users(ru + ino)
        User.map_url = map_url
    else:
        map_url = User.map_url
    bot.send_photo(message.chat.id, map_url, caption='–ù–∞—à–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–∞ –∫–∞—Ä—Ç–µ')
    logging.warning(log(message, '–ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'))


@bot.message_handler(commands=['timezones'])
def get_all_timezones(message):
    """–í—ã–≤–æ–¥–∏—Ç —á–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞."""
    db = DataBase(message.chat.id)
    time = db.get_timezones()
    db.close()
    utc_shift = 3
    if time:
        utc_shift = sum([i[1] * i[2] for i in time]) / sum(
            [i[2] for i in time]
        )
    moscow_shift = utc_shift - 3
    header = (
        '_–ß–∞—Å–æ–≤—ã–µ –ø–æ—è—Å–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ–≥–æ—Ä—Ç—ã 57 –≤ —ç—Ç–æ–º –±–æ—Ç–µ_\n'
        f'–°—Ä–µ–¥–Ω–µ–µ —Å–º–µ—â–µ–Ω–∏–µ {utc_shift:.1f} —á–∞—Å. –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ UTC '
        f'(–ì—Ä–∏–Ω–≤–∏—á), {moscow_shift:.1f} —á–∞—Å. - –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ú–æ—Å–∫–≤—ã.\n'
        '*–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å* *|*     *–ö–æ–ª-–≤–æ —á–µ–ª–æ–≤–µ–∫*\n'
        '----------------------------------------\n'
    )
    timezone_stats = '–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç'
    if time:
        timezone_stats = '\n'.join(
            [
                f'*{zone}* _(UTC +{utc} —á.)_: `{people}`'
                for zone, utc, people in time
            ]
        )
    answer = header + timezone_stats
    bot.send_message(message.chat.id, answer, parse_mode='Markdown')
    logging.warning(log(message, '–ó–∞–ø—Ä–æ—Å —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'))


@bot.message_handler(content_types=['location'])
def location(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–∫–∏."""
    if not message.location:
        return
    user = activate_user(message.chat.id)
    country, city, timezone, utc_offset = coordinates_to_city(
        message.location.latitude, message.location.longitude
    )
    user.city = city
    user.country = country
    user.timezone = timezone
    user.utc_offset = utc_offset
    bot.send_message(
        message.chat.id,
        '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∞.',
        reply_markup=ReplyKeyboardRemove(),
    )
    submit_user(message)


@bot.message_handler(commands=['timer'])
def timer(message):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞ —É—á–µ—Ç–∞ —É—á–µ–±–Ω–æ–≥–æ
    –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.
    """
    user = activate_user(message.chat.id)
    if not user.record:
        answer = '–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å. –í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.'
        bot.send_message(message.chat.id, answer)
        return
    if user.timer:
        bot.send_message(message.chat.id, '–£ –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Ç–∞–π–º–µ—Ä.')
        return
    sprint_select = InlineKeyboardMarkup(row_width=2)
    sprint_select.add(
        *[
            InlineKeyboardButton(
                text=f'–°–ø—Ä–∏–Ω—Ç ‚Ññ {spr}', callback_data=f'sprint {spr}'
            )
            for spr in range(3, 17)
        ]
    )
    sprint_select.add(
        InlineKeyboardButton(text='–°–ø—Ä—è—Ç–∞—Ç—å —Ç–∞–π–º–µ—Ä', callback_data='no_timer')
    )
    answer = REMARKS['timers']
    db = DataBase(message.chat.id)
    all_sprints = db.all_sprints()
    db.close()
    header = (
        '_–í—Ä–µ–º—è, –∑–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–æ–≤_\n'
        '–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—É—â–∏–π —Å–ø—Ä–∏–Ω—Ç –¥–ª—è —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∏–∂–µ, '
        '—Å—Ä–µ–¥–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.\n\n'
        '*–°–ø—Ä–∏–Ω—Ç*  *|*  *–ó–∞—Ç—Ä–∞—á–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–∏*\n'
        '----------------------------------------\n'
    )
    if all_sprints:
        sprints = '\n'.join(
            [
                f'*–°–ø—Ä–∏–Ω—Ç ‚Ññ{spr}*:  `{total_time}`'
                for spr, total_time in all_sprints
            ]
        )
        answer = header + sprints
    bot.send_message(
        message.chat.id,
        answer,
        parse_mode='Markdown',
        reply_markup=sprint_select,
    )


# –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data == 'name')
def provide_name(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message = '–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –≤ –ø–æ–ª–µ –æ—Ç–≤–µ—Ç–∞.'
    reply = ForceReply(input_field_placeholder='–ú–µ–Ω—è –∑–æ–≤—É—Ç...')
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, message, reply_markup=reply)


@bot.callback_query_handler(func=lambda call: call.data == 'geo')
def provide_geo(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    message = '–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –≤ –ø–æ–ª–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.'
    reply = ForceReply(input_field_placeholder='–ú–æ–π –≥–æ—Ä–æ–¥...')
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, message, reply_markup=reply)


@bot.callback_query_handler(func=lambda call: call.data == 'location')
def provide_location(call):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏."""
    message = REMARKS['location']
    keyboard = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    button_geo = KeyboardButton(
        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True
    )
    keyboard.add(button_geo)
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(
        call.message.chat.id,
        message,
        reply_markup=keyboard,
        parse_mode='Markdown',
    )


@bot.callback_query_handler(func=lambda call: call.data == 'delete')
def delete(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ë–î."""
    message = '–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, message)


@bot.callback_query_handler(func=lambda call: call.data == 'save')
def save_user(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î."""
    user = activate_user(call.message.chat.id)
    if user.save_user():
        bot.send_document(
            call.message.chat.id,
            (
                'CgACAgIAAxkDAAMJY-oV_47ABn3ZrCYpRDqxoexf'
                '3WMAApwiAALnolFLCGfyQJZf5HAuBA'
            ),
            caption='–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!',
        )
        alert_all(user)
        logging.warning(log(message, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'))
    else:
        bot.send_message(call.message.chat.id, '–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏')
    bot.delete_message(call.message.chat.id, call.message.message_id)


@bot.callback_query_handler(func=lambda call: call.data == 'callall')
def call_all(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∑–µ–º–ª—è–∫–∞–º."""
    message = '–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï–≥–æ —É–≤–∏–¥—è—Ç –≤—Å–µ –≤–∞—à–∏ –∑–µ–º–ª—è–∫–∏ –≤ —á–∞—Ç–µ.'
    reply = ForceReply(input_field_placeholder='–°–æ–æ–±—â–µ–Ω–∏–µ...')
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, message, reply_markup=reply)


@bot.callback_query_handler(func=lambda call: call.data == 'answerall')
def answer_all(call):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–µ–º–ª—è–∫–∞."""
    message = '–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï–≥–æ —É–≤–∏–¥—è—Ç –≤—Å–µ –≤–∞—à–∏ –∑–µ–º–ª—è–∫–∏ –≤ —á–∞—Ç–µ.'
    reply = ForceReply(input_field_placeholder='–°–æ–æ–±—â–µ–Ω–∏–µ...')
    bot.send_message(call.message.chat.id, message, reply_markup=reply)
    bot.answer_callback_query(callback_query_id=call.id)


@bot.callback_query_handler(func=lambda call: call.data.startswith('sprint'))
def show_timer(call):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø—Ä–∏–Ω—Ç–∞."""
    user = activate_user(call.message.chat.id)
    if user.timer:
        return
    sprint_num = call.data.split()[-1]
    timer = ReplyKeyboardMarkup(
        row_width=1, resize_keyboard=True, one_time_keyboard=True
    )
    timer.add(f"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä: c–ø—Ä–∏–Ω—Ç ‚Ññ {sprint_num}")
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(
        call.message.chat.id,
        '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–∞–π–º–µ—Ä–∞ –≤–Ω–∏–∑—É, –∫–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç–µ —É—á–µ–±—É.',
        reply_markup=timer,
    )


@bot.callback_query_handler(func=lambda call: call.data == 'no_timer')
def hide_timer(call):
    """–ü—Ä—è—á–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞"""
    user = activate_user(call.message.chat.id)
    if user.timer:
        return
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(
        call.message.chat.id,
        '–¢–∞–π–º–µ—Ä —Å–ø—Ä—è—Ç–∞–Ω. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø—Ä–∏–Ω—Ç',
        reply_markup=ReplyKeyboardRemove(),
    )


# –í—ã–Ω–µ—Å–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
def submit_user(message):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ë–î."""
    user = activate_user(message.chat.id)
    save_user = InlineKeyboardMarkup()
    save_user.add(
        InlineKeyboardButton(
            text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ', callback_data='save'
        )
    )
    save_user.add(
        InlineKeyboardButton(text='–ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å', callback_data='delete')
    )
    bot.send_message(
        message.chat.id,
        REMARKS['submit'].format(user.name, user.city, user.country),
        reply_markup=save_user,
        parse_mode='Markdown',
    )


def send_all(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∑–µ–º–ª—è–∫–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = activate_user(message.chat.id)
    locals = user.get_locals()
    if not locals:
        bot.send_message(
            chat_id=message.chat.id,
            text='–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–µ –≤–∏–∂—É –≤–∞—à–∏—Ö –∑–µ–º–ª—è–∫–æ–≤.',
        )
        return
    if user.country == '–†–æ—Å—Å–∏—è':
        place = user.city
    else:
        place = user.country
    send_message = InlineKeyboardMarkup()
    send_message.add(
        InlineKeyboardButton(
            text='–û—Ç–≤–µ—Ç–∏—Ç—å –≤—Å–µ–º –≤ —á–∞—Ç–µ –∑–µ–º–ª—è–∫–æ–≤', callback_data='answerall'
        )
    )
    for loc in locals:
        bot.send_message(
            chat_id=loc,
            text=f'_–í–∞—à –∑–µ–º–ª—è–∫_ *{user.name}* _–ø–∏—à–µ—Ç_:\n{message.text}',
            reply_markup=send_message,
            parse_mode='Markdown',
        )
    bot.send_message(
        chat_id=message.chat.id,
        text=(
            f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ü–æ–ª—É—á–∞—Ç–µ–ª–∏: *{len(locals)}* —á–µ–ª.\n'
            f'–õ–æ–∫–∞—Ü–∏—è: {place}'
        ),
        parse_mode='Markdown',
    )
    logging.warning(log(message, f'–ù–∞–ø–∏—Å–∞–ª –∑–µ–º–ª—è–∫–∞–º {place}: {message.text}'))


def alert_all(user):
    """–ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∑–µ–º–ª—è–∫–∞."""
    locals = user.get_locals()
    if not locals:
        return
    for loc in locals:
        bot.send_document(
            chat_id=loc,
            document=(
                'CgACAgIAAxkDAAMJY-oV_47ABn3ZrCYpRDqxoexf'
                '3WMAApwiAALnolFLCGfyQJZf5HAuBA'
            ),
            caption=(
                '–°—Ä–µ–¥–∏ –≤–∞—à–∏—Ö –∑–µ–º–ª—è–∫–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ, '
                f'*{user.name}*. –¢–µ–ø–µ—Ä—å –≤–∞—Å *{len(locals)+1}* —á–µ–ª.'
            ),
            parse_mode='Markdown',
        )


def new_timer(message):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –æ –≤—Ä–µ–º–µ–Ω–∏ —Å—Ç–∞—Ä—Ç–∞ –Ω–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ —É—á–µ–±—ã –≤ –ë–î."""
    user = activate_user(message.chat.id)
    if user.timer:
        return
    try:
        sprint = int(message.text.split()[-1])
    except ValueError:
        return
    if not 0 < sprint < 17:
        return
    db = DataBase(message.chat.id)
    db.start_timer(sprint)
    db.close()
    time = local_time(user.timezone)
    user.timer = True
    answer = f'–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ *{time}*'
    stop_timer = ReplyKeyboardMarkup(
        row_width=1, resize_keyboard=True, one_time_keyboard=True
    )
    stop_timer.add(f"–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä (–∑–∞–ø—É—â–µ–Ω –≤ {time})")
    bot.send_message(
        message.chat.id, answer, parse_mode='Markdown', reply_markup=stop_timer
    )


def end_timer(user_id, forcibly=False):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä, –∑–∞–ø–∏—Å—ã–≤–∞—è –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ –ë–î."""
    user = activate_user(user_id)
    if not user.timer:
        bot.send_message(
            user_id,
            '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.',
            reply_markup=ReplyKeyboardRemove(),
        )
        return
    db = DataBase(user_id)
    db.end_timer()
    id = db.last_timer()[0]
    sprint, start, duration = db.last_timer_duration(id)
    sprint_time = db.sprint_time(sprint)[0]
    db.close()
    user.timer = None
    start = local_time(user.timezone, start)
    answer = REMARKS['timer_stop'].format(start, duration, sprint, sprint_time)
    if forcibly:
        header = (
            '*–í—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –±–æ–ª—å—à–µ 8 —á–∞—Å–æ–≤. –¢–∞–∫ –¥–æ–ª–≥–æ —É—á–∏—Ç—å—Å—è –Ω–µ–ª—å–∑—è.* '
            '*–í–∞—à —Ç–∞–π–º–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.*\n\n'
        )
        answer = header + answer
    timer = ReplyKeyboardMarkup(
        row_width=1, resize_keyboard=True, one_time_keyboard=True
    )
    timer.add(f"–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä: c–ø—Ä–∏–Ω—Ç ‚Ññ {sprint}")
    bot.send_message(
        user_id, answer, parse_mode='Markdown', reply_markup=timer
    )


def monitoring():
    """–†–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ë–î –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤. –ï—Å–ª–∏
    –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –±–æ–ª—å—à–µ —á–∞—Å–∞ - –≤—ã—Å—ã–ª–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–¥—ã—Ö–µ.
    –ï—Å–ª–∏ –±–æ–ª—å—à–µ 8 —á–∞—Å–æ–≤ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–∞–π–º–µ—Ä.
    """
    one_minute_monitor = Timer(60.0, monitoring)
    one_minute_monitor.start()
    db = DataBase()
    active_timers = db.check_all_active_timers()
    db.close()
    if active_timers:
        for user_id, start_time in active_timers:
            status = timer_alert(start_time)
            if not status:
                break
            if status == 'alert':
                user = activate_user(user_id)
                start = local_time(user.timezone, start_time)
                bot.send_message(
                    user_id,
                    REMARKS['timer_alert'].format(start),
                    parse_mode='Markdown',
                )
            if status == 'close':
                end_timer(user_id, forcibly=True)


# –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É
@bot.message_handler(content_types=["text"])
def handle_text(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏,
    –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∑–µ–º–ª—è–∫–∞–º.
    """
    user = activate_user(message.chat.id)
    if not message.reply_to_message:
        if message.text.startswith('–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä: c–ø—Ä–∏–Ω—Ç ‚Ññ'):
            new_timer(message)
        elif message.text.startswith('–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞–π–º–µ—Ä'):
            end_timer(message.chat.id)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞–∑–∞—Ç—å. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å ‚Üô Menu.',
            )
        return
    operation = message.reply_to_message.text
    if operation.startswith('–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è') and not user.record:
        user.name = message.text[:20].title()
        provide_geo = InlineKeyboardMarkup()
        provide_geo.add(
            InlineKeyboardButton(
                text='–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –≥–æ—Ä–æ–¥', callback_data='geo'
            )
        )
        provide_geo.add(
            InlineKeyboardButton(
                text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', callback_data='location'
            )
        )
        bot.send_message(
            message.chat.id,
            REMARKS['geo'].format(user.name),
            reply_markup=provide_geo,
            parse_mode='Markdown',
        )
    if operation.startswith('–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥') and not user.record:
        country, city, timezone, utc_offset = check_city(message.text)
        if city:
            user.city = city
            user.country = country
            user.timezone = timezone
            user.utc_offset = utc_offset
            submit_user(message)
        else:
            bot.send_message(
                message.chat.id,
                '–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            )
    if operation.startswith('–í–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'):
        bot.delete_message(
            message.chat.id, message.reply_to_message.message_id
        )
        send_all(message)


# –ó–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
if __name__ == '__main__':
    db = DataBase()
    db.create_database()
    db.close()
    monitoring()
    bot.infinity_polling(timeout=10, long_polling_timeout=5)
